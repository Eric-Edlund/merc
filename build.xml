<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="Merc" default="compile" basedir=".">
    <description>Builds Merc</description>

  <!-- Set global properties for all builds. -->
  <property environment="env"/>
  <property name="scala.home" location="${env.SCALA_HOME}"/>

  <!-- Locations of things. -->
  <property name="main.sources.dir" location="src"/>
  <property name="test.sources.dir" location="test"/>
  <property name="main.classes.dir" location="build/production/Merc"/>
  <property name="test.classes.dir" location="build/tests/Merc"/>
  <property name="scaladoc.dir"     location="doc/scaladoc"/>
  
  <target name="init">
    <property name="scala-library.jar"  location="${scala.home}/lib/scala-library.jar"/>
    <property name="scala-reflect.jar"  location="${scala.home}/lib/scala-reflect.jar"/>
    <property name="scala-parsers.jar"  location="${scala.home}/lib/scala-parser-combinators_2.12-1.0.7.jar"/>
    <property name="scala-xml.jar"      location="${scala.home}/lib/scala-xml_2.12-1.0.6.jar"/>
    <property name="scala-compiler.jar" location="${scala.home}/lib/scala-compiler.jar"/>
    <property name="antlr.jar"          location="lib/antlr4-4.5.3.jar"/>
    <property name="scalatest.jar"      location="lib/scalatest_2.12-3.0.1.jar"/>
    <property name="scalactic.jar"      location="lib/scalactic_2.12-3.0.1.jar"/>

    <!-- Classpath used during compilation. -->
    <path id="build.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-xml.jar}"/>
      <pathelement location="${scala-parsers.jar}"/>
      <pathelement location="${antlr.jar}"/>
      <pathelement location="${main.classes.dir}"/>
    </path>

    <!-- Classpath used during tests compilation. -->
    <!-- Is there is a nice way to get this to refer to the compilation classpath above? -->
    <path id="build.test.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-xml.jar}"/>
      <pathelement location="${scala-parsers.jar}"/>
      <pathelement location="${antlr.jar}"/>
      <pathelement location="${scalatest.jar}"/>
      <pathelement location="${scalactic.jar}"/>
      <pathelement location="${main.classes.dir}"/>

      <pathelement location="${test.classes.dir}"/>
    </path>

    <!-- Classpath used during scaladoc build. -->
    <path id="scaladoc.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-xml.jar}"/>
      <pathelement location="${scala-parsers.jar}"/>
      <pathelement location="${antlr.jar}"/>
      <pathelement location="${scalatest.jar}"/>
      <pathelement location="${scalactic.jar}"/>
      <pathelement location="${main.classes.dir}"/>
    </path>

    <!-- Get the Scala related tasks. -->
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <!-- Is the following use of the classpath element appropriate here? -->
        <!-- <classpath refid="build.classpath"/> -->
        <pathelement location="${scala-compiler.jar}"/>
        <pathelement location="${scala-reflect.jar}"/>
        <pathelement location="${scala-library.jar}"/>
        <pathelement location="${scala-xml.jar}"/>
        <pathelement location="${scala-parsers.jar}"/>
      </classpath>
    </taskdef>
    <taskdef name="scalatest" classname="org.scalatest.tools.ScalaTestAntTask">
      <classpath refid="build.test.classpath"/>
    </taskdef>

    <!-- Create the time stamp -->
    <tstamp/>
  </target>


  <target name="resolve" description="Retrieve dependencies with Ivy">
    <!-- <ivy:retrieve pattern="${project_home}/lib/[artifact].[ext]"/> -->
    <ivy:retrieve />
  </target>

    
  <target name="build-parser" depends="init" description="Build the parser">
    <java classname="org.antlr.v4.Tool" fork="true" dir="${main.sources.dir}/edu/vtc/merc">
      <arg value="-visitor"/>
      <arg value="XDR.g4"/>
      <classpath refid="build.test.classpath"/>
    </java>
  </target>

  
  <target name="compile" depends="build-parser" description="Compile Merc">
    <mkdir dir="${main.classes.dir}"/>

    <javac srcdir="${main.sources.dir}"
           destdir="${main.classes.dir}"
           deprecation="yes"
           classpathref="build.classpath"
           includeantruntime="false">
      <include name="**/*.java"/>
    </javac>
    
    <scalac srcdir="${main.sources.dir}"
            destdir="${main.classes.dir}"
            deprecation="yes"
            unchecked="yes"
            classpathref="build.classpath">
      <include name="**/*.scala"/>
    </scalac>
  </target>


  <target name="compile-tests" depends="compile" description="Compile the tests">
    <mkdir dir="${test.classes.dir}"/>

    <!-- To pass additional parameters to the Scala compiler use the addparams attribute. -->
    <scalac srcdir="${test.sources.dir}"
            destdir="${test.classes.dir}"
            deprecation="yes"
            unchecked="yes"
            classpathref="build.test.classpath">
      <include name="**/*.scala"/>
    </scalac>
  </target>

  
  <target name="test" depends="compile-tests" description="Run the tests">
    <scalatest haltonfailure="true">
      <runpath>
        <pathelement location="${main.classes.dir}"/>
        <pathelement location="${test.classes.dir}"/>
      </runpath>
      <reporter type="stdout" config="W"/>  <!-- 'W' turns off ANSI escape sequences. -->
      <suite classname="edu.vtc.merc.SyntaxSpec"/>
      <suite classname="edu.vtc.merc.MercSpec"/>
    </scalatest>
  </target>

  
  <target name="scaladoc" depends="compile" description="Generate the Scaladoc">
    <mkdir dir="${scaladoc.dir}"/>
    <scaladoc srcdir="${main.sources.dir}"
              destdir="${scaladoc.dir}"
              deprecation="yes"
              unchecked="yes"
              doctitle="Merc Internal Documentation"
              classpathref="build.classpath">
      <include name="**/*.scala"/>
    </scaladoc>
  </target>


  <target name="clean" description="Clean up">
    <delete file="${main.sources.dir}/edu/vtc/merc/Merc.tokens"/>
    <delete file="${main.sources.dir}/edu/vtc/merc/MercBaseListener.java"/>
    <delete file="${main.sources.dir}/edu/vtc/merc/MercBaseVisitor.java"/>
    <delete file="${main.sources.dir}/edu/vtc/merc/MercLexer.java"/>
    <delete file="${main.sources.dir}/edu/vtc/merc/MercLexer.tokens"/>
    <delete file="${main.sources.dir}/edu/vtc/merc/MercListener.java"/>
    <delete file="${main.sources.dir}/edu/vtc/merc/MercParser.java"/>
    <delete file="${main.sources.dir}/edu/vtc/merc/MercVisitor.java"/>
    <delete dir="${main.classes.dir}"/>
    <delete dir="${test.classes.dir}"/>
    <delete dir="${scaladoc.dir}"/>
  </target>

</project>
