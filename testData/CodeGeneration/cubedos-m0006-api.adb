--------------------------------------------------------------------------------
-- FILE   : %FILENAME%
-- SUBJECT: Body of a package that implements the CubedOS.m0006 API
-- AUTHOR : (C) Copyright 2021 by Vermont Technical College
--
-- All the subprograms in this package are task safe.
--
-- THIS FILE WAS GENERATED BY Merc. DO NOT EDIT!!
--------------------------------------------------------------------------------
pragma SPARK_Mode(On);

with Ada.Real_Time;
use Ada.Real_Time;
pragma Warnings(Off);

with CubedOS.Lib.XDR;
with CubedOS.Lib;
use  CubedOS.Lib;
use  CubedOS.Lib.XDR;
with CubedOS.Message_Types.Mutable; use CubedOS.Message_Types.Mutable;

package body CubedOS.m0006.API is

   procedure Free is new Ada.Unchecked_Deallocation(String, String_Ptr);
   procedure Time_Message_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      declare
         Seconds : Seconds_Count;
         Frac : Time_Span;
         Result : XDR_Unsigned_Hyper;
      begin
         Split(time1, Seconds, Frac);
         Result := XDR_Unsigned_Hyper(Seconds) * 1_000_000_000 + XDR_Unsigned_Hyper(To_Duration(Frac) * 1_000_000_000);
         XDR.Encode(Result, Payload.all, Position, Last);
         Position := Last + 1;
      end;
      declare
         Seconds : Seconds_Count;
         Frac : Time_Span;
         Result : XDR_Unsigned_Hyper;
      begin
         Split(time2, Seconds, Frac);
         Result := XDR_Unsigned_Hyper(Seconds) * 1_000_000_000 + XDR_Unsigned_Hyper(To_Duration(Frac) * 1_000_000_000);
         XDR.Encode(Result, Payload.all, Position, Last);
         Position := Last + 1;
      end;
      declare
         Seconds : Seconds_Count;
         Frac : Time_Span;
         Result : XDR_Unsigned_Hyper;
      begin
         Split(time3, Seconds, Frac);
         Result := XDR_Unsigned_Hyper(Seconds) * 1_000_000_000 + XDR_Unsigned_Hyper(To_Duration(Frac) * 1_000_000_000);
         XDR.Encode(Result, Payload.all, Position, Last);
         Position := Last + 1;
      end;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Time_Message_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Time_Message_Encode;
   
   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         time1 => time1,
         time2 => time2,
         time3 => time3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Time_Message;
   
   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         time1 => time1,
         time2 => time2,
         time3 => time3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Time_Message;
   
   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         time1 => time1,
         time2 => time2,
         time3 => time3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Time_Message;
   
   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         time1 => time1,
         time2 => time2,
         time3 => time3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Time_Message;
   
   procedure Time_Message_Decode
      (Message : in Message_Record;
      time1 : out Ada.Real_Time.Time;
      time2 : out Ada.Real_Time.Time;
      time3 : out Pizza_Time;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_time1   : XDR.XDR_Unsigned_Hyper;
      Raw_time2   : XDR.XDR_Unsigned_Hyper;
      Raw_time3   : XDR.XDR_Unsigned_Hyper;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      time1 := Ada.Real_Time.Time(Time_First);
      time2 := Ada.Real_Time.Time(Time_First);
      time3 := Pizza_Time(Time_First);
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_time1, Last);
      Position := Last + 1;
      time1 := Ada.Real_Time.Time(Ada.Real_Time.Time_Of(Seconds_Count(Raw_time1 / 1_000_000_000), Nanoseconds(Integer(Raw_time1 mod 1_000_000_000))));
      XDR.Decode(Payload(Message).all, Position, Raw_time2, Last);
      Position := Last + 1;
      time2 := Ada.Real_Time.Time(Ada.Real_Time.Time_Of(Seconds_Count(Raw_time2 / 1_000_000_000), Nanoseconds(Integer(Raw_time2 mod 1_000_000_000))));
      XDR.Decode(Payload(Message).all, Position, Raw_time3, Last);
      Position := Last + 1;
      time3 := Pizza_Time(Ada.Real_Time.Time_Of(Seconds_Count(Raw_time3 / 1_000_000_000), Nanoseconds(Integer(Raw_time3 mod 1_000_000_000))));
   end Time_Message_Decode;
   
   
   procedure Time_Span_Message_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   is
      subtype Data_Index_Type is XDR_Index_Type range 0 .. 1023;
      Position   : Data_Index_Type;
      Last       : Data_Index_Type;
      subtype Definite_Data_Array is Data_Array(Data_Index_Type);
      Payload : Data_Array_Owner := new Definite_Data_Array'(others => 0);
      Message : Mutable_Message_Record;
   begin
      Position := 0;
      declare
         type Time_Float is delta 0.000_000_001 digits 18;
         type Big_Float is delta 1.0 digits 18;
      begin
         XDR.Encode(XDR_Unsigned_Hyper(Time_Float(To_Duration(span1)) * Big_Float(1_000_000_000.0)), Payload.all, Position, Last);
         Position := Last + 1;
      end;
      declare
         type Time_Float is delta 0.000_000_001 digits 18;
         type Big_Float is delta 1.0 digits 18;
      begin
         XDR.Encode(XDR_Unsigned_Hyper(Time_Float(To_Duration(span2)) * Big_Float(1_000_000_000.0)), Payload.all, Position, Last);
         Position := Last + 1;
      end;
      declare
         type Time_Float is delta 0.000_000_001 digits 18;
         type Big_Float is delta 1.0 digits 18;
      begin
         XDR.Encode(XDR_Unsigned_Hyper(Time_Float(To_Duration(span3)) * Big_Float(1_000_000_000.0)), Payload.all, Position, Last);
         Position := Last + 1;
      end;
      Make_Empty_Message (
         Sender_Address   => Sender_Address,
         Receiver_Address => Receiver_Address,
         Request_ID   => Request_ID,
         Message_Type => Time_Span_Message_Msg,
         Payload => Payload,
         Result => Message,
         Priority   => Priority);
      Result := Immutable(Message);
      Delete(Message);
      pragma Unused(Last, Payload, Position, Message);
   end Time_Span_Message_Encode;
   
   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Span_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         span1 => span1,
         span2 => span2,
         span3 => span3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Status);
   end Send_Time_Span_Message;
   
   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Span_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => Receiver_Address,
         Request_ID => Request_ID,
         span1 => span1,
         span2 => span2,
         span3 => span3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message);
   end Send_Time_Span_Message;
   
   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Span_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Domain_ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         span1 => span1,
         span2 => span2,
         span3 => span3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, This_Domain, Status);
   end Send_Time_Span_Message;
   
   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   is
      Message : Message_Record;
      Status : Status_Type := Unavailable;
   begin
      pragma Assert(Payload(Message) = null);
      Time_Span_Message_Encode(
         Sender_Address => (This_Domain.ID, Module_ID(Sender)),
         Receiver_Address => (Receiving_Domain.ID, Receiving_Module.Module_ID),
         Request_ID => Request_ID,
         span1 => span1,
         span2 => span2,
         span3 => span3,
         Result => Message,
         Priority => Priority);
      Message_Manager.Send_Message(Sender, Message, Receiving_Module, Receiving_Domain, Status);
      pragma Unused(Status);
   end Send_Time_Span_Message;
   
   procedure Time_Span_Message_Decode
      (Message : in Message_Record;
      span1 : out Ada.Real_Time.Time_Span;
      span2 : out Ada.Real_Time.Time_Span;
      span3 : out Turtle_Time;
      Decode_Status : out Message_Status_Type)
   is
      Position : Data_Index_Type;
      Raw_span1  : XDR.XDR_Unsigned_Hyper;
      Raw_span2  : XDR.XDR_Unsigned_Hyper;
      Raw_span3  : XDR.XDR_Unsigned_Hyper;
      Last : Data_Index_Type;
   begin
      Decode_Status := Success;
      span1 := Ada.Real_Time.Time_Span(Time_Span_Zero);
      span2 := Ada.Real_Time.Time_Span(Time_Span_Zero);
      span3 := Turtle_Time(Time_Span_Zero);
      Position := 0;
      
      -- Begin Decoding
      XDR.Decode(Payload(Message).all, Position, Raw_span1, Last);
      Position := Last + 1;
      span1 := Seconds(Integer(Raw_span1 / 1_000_000_000)) + Nanoseconds(Integer(Raw_span1 mod 1_000_000_000));
      XDR.Decode(Payload(Message).all, Position, Raw_span2, Last);
      Position := Last + 1;
      span2 := Seconds(Integer(Raw_span2 / 1_000_000_000)) + Nanoseconds(Integer(Raw_span2 mod 1_000_000_000));
      XDR.Decode(Payload(Message).all, Position, Raw_span3, Last);
      Position := Last + 1;
      span3 := Seconds(Integer(Raw_span3 / 1_000_000_000)) + Nanoseconds(Integer(Raw_span3 mod 1_000_000_000));
   end Time_Span_Message_Decode;
   
   

end CubedOS.m0006.API;
