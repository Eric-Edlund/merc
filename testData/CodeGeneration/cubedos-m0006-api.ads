--------------------------------------------------------------------------------
-- FILE   : cubedos-m0006-api.ads
-- SUBJECT: Specification of a package that defines the CubedOS.m0006 API
-- AUTHOR : (C) Copyright 2021 by Vermont Technical College
--
-- All the subprograms in this package are task safe.
--
-- THIS FILE WAS GENERATED BY Merc. DO NOT EDIT!!
--------------------------------------------------------------------------------
pragma SPARK_Mode(On);

with Ada.Real_Time;
pragma Warnings(Off);

with Name_Resolver;
with CubedOS.Lib; use CubedOS.Lib;
with Message_Manager;  use Message_Manager;
with CubedOS.Message_Types; use CubedOS.Message_Types;
with System;
with CubedOS.Lib.XDR; use CubedOS.Lib.XDR;
with Ada.Unchecked_Deallocation;


package CubedOS.m0006.API is

   pragma Elaborate_Body;
   type Octet_Array_Ptr is access CubedOS.Lib.Octet_Array;
   type String_Ptr is access String;
   
   This_Module : constant Module_ID_Type := Name_Resolver.m0006;
   
   type Message_Type is
      (Time_Span_Message, 
      Time_Message);

   Time_Span_Message_Msg : constant Universal_Message_Type := (This_Module, Message_Type'Pos(Time_Span_Message));
   Time_Message_Msg : constant Universal_Message_Type := (This_Module, Message_Type'Pos(Time_Message));
   
   This_Receives : aliased constant Message_Type_Array := Empty_Type_Array;
   Mail_Target : aliased constant Module_Metadata := Define_Module(This_Module, This_Receives'Access);
   
   type Pizza_Time is new Ada.Real_Time.Time;
   
   procedure Time_Message_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   with
      Pre => true
         and then Sender_Address.Module_ID = This_Module,
      Post => CubedOS.Message_Types.Message_Type(Result) = Time_Message_Msg
         and CubedOS.Message_Types.Sender_Address(Result) = Sender_Address
         and CubedOS.Message_Types.Receiver_Address(Result) = Receiver_Address
         and Payload(Result) /= null;

   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
      ;

   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
         and then Receiver_Address.Domain_ID = Domain_ID
      ;

   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
         and then Receives(Receiving_Module, Time_Message_Msg)
         and then Has_Module(Receiving_Domain, Receiving_Module.Module_ID)
      ;

   procedure Send_Time_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      time1 : in Ada.Real_Time.Time;
      time2 : in Ada.Real_Time.Time;
      time3 : in Pizza_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
         and then Receives(Receiving_Module, Time_Message_Msg)
         and then Has_Module(This_Domain, Receiving_Module.Module_ID)
      ;

   function Is_Time_Message(Message : Message_Record) return Boolean is
      (CubedOS.Message_Types.Message_Type(Message) = Time_Message_Msg);
   procedure Time_Message_Decode
      (Message : in Message_Record;
      time1 : out Ada.Real_Time.Time;
      time2 : out Ada.Real_Time.Time;
      time3 : out Pizza_Time;
      Decode_Status : out Message_Status_Type)
   with
      Global => null,
      Pre => Is_Time_Message(Message) and Payload(Message) /= null;


   type Turtle_Time is new Ada.Real_Time.Time_Span;
   
   procedure Time_Span_Message_Encode
      (Receiver_Address : in Message_Address;
      Sender_Address : in Message_Address;
      Request_ID : in Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Priority : in System.Priority := System.Default_Priority;
      Result : out  Message_Record)
   with
      Pre => true
         and then Sender_Address.Module_ID = This_Module,
      Post => CubedOS.Message_Types.Message_Type(Result) = Time_Span_Message_Msg
         and CubedOS.Message_Types.Sender_Address(Result) = Sender_Address
         and CubedOS.Message_Types.Receiver_Address(Result) = Receiver_Address
         and Payload(Result) /= null;

   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
      ;

   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiver_Address : Message_Address;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
         and then Receiver_Address.Domain_ID = Domain_ID
      ;

   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Receiving_Domain : Domain_Metadata := This_Domain;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
         and then Receives(Receiving_Module, Time_Span_Message_Msg)
         and then Has_Module(Receiving_Domain, Receiving_Module.Module_ID)
      ;

   procedure Send_Time_Span_Message
      (Sender : Module_Mailbox;
      Receiving_Module : Module_Metadata;
      Request_ID : Request_ID_Type;
      span1 : in Ada.Real_Time.Time_Span;
      span2 : in Ada.Real_Time.Time_Span;
      span3 : in Turtle_Time;
      Status : out Status_Type;
      Priority : System.Priority := System.Default_Priority)
   with
      Global => (In_Out => Mailboxes),
      Pre => Messaging_Ready
         and then Module_ID(Sender) = This_Module
         and then Receives(Receiving_Module, Time_Span_Message_Msg)
         and then Has_Module(This_Domain, Receiving_Module.Module_ID)
      ;

   function Is_Time_Span_Message(Message : Message_Record) return Boolean is
      (CubedOS.Message_Types.Message_Type(Message) = Time_Span_Message_Msg);
   procedure Time_Span_Message_Decode
      (Message : in Message_Record;
      span1 : out Ada.Real_Time.Time_Span;
      span2 : out Ada.Real_Time.Time_Span;
      span3 : out Turtle_Time;
      Decode_Status : out Message_Status_Type)
   with
      Global => null,
      Pre => Is_Time_Span_Message(Message) and Payload(Message) /= null;



end CubedOS.m0006.API;
